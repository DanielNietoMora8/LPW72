# -*- coding: utf-8 -*-
"""alexander_rua.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_NxKl2KYIUzx1OYz7JfFH-VMafSBiQeo
"""

class generadormatriz:
    def __init__(self, size, fill_type, num_matrices):
        self.size = size
        self.fill_type = fill_type
        self.num_matrices = num_matrices
        self.matrices = []

    def generate_matrix(self):
        if self.fill_type == "zeros":
            matrix = np.zeros(self.size)
        elif self.fill_type == "ones":
            matrix = np.ones(self.size)
        elif self.fill_type == "random":
            matrix = np.random.uniform(20, 40, self.size)
        else:
            raise ValueError("Tipo de relleno no válido. Los tipos de relleno admitidos son 'zeros', 'ones', and 'random'.")

        self.matrices.append(matrix)

    def matrix_multiplication(self):
        if len(self.matrices) < 2:
            print("Se requieren al menos 2 matrices para la multiplicación de matrices")
            return None

        result = np.matmul(self.matrices[0], self.matrices[1])

        for i in range(2, len(self.matrices)):
            result = np.matmul(result, self.matrices[i])

        return result

    def show_matrices(self):
        if len(self.matrices) == 0:
            print("No matrices generated yet.")
            return

        for matrix in self.matrices:
            plt.imshow(matrix, cmap='gray')
            plt.show()

    def get_sum(self):
        if len(self.matrices) == 0:
            print("No matrices generated yet.")
            return None

        sums = [np.sum(matrix) for matrix in self.matrices]
        return sums

class Identificacion:
    def __init__(self, nombre, edad):
        self._nombre = nombre
        self._edad = edad

    def saludar(self):
        print(f"Hola, soy {self._nombre} y tengo {self._edad} años.")

