# -*- coding: utf-8 -*-
"""Kevin_Quintero_Zapata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awrj2BEx0bGe4cbKiy1YfmFLpBs7CIeB

punto1
"""

import numpy as np
import matplotlib.pyplot as plt

class matriz:
    def inicial(self, size, fill_type, num_matrices):
        self.size = size
        self.fill_type = fill_type
        self.num_matrices = num_matrices
        self.matrices = []
        self.generate_matrices()

    def generador(self):
        for _ in range(self.num_matrices):
            if self.fill_type == "zeros":
                matrix = np.zeros(self.size)
            elif self.fill_type == "ones":
                matrix = np.ones(self.size)
            elif self.fill_type == "random":
                matrix = np.random.uniform(20, 40, self.size)
            else:
                raise ValueError("Invalid fill_type. Choose from 'zeros', 'ones', or 'random'.")

            self.matrices.append(matrix)

    def multiplicacion(self):
        if len(self.matrices) < 2:
            raise ValueError("At least two matrices are required for matrix multiplication.")

        resultado = self.matrices[0]
        for i in range(1, len(self.matrices)):
            resultado = np.dot(result, self.matrices[i])

        return resultado

    def muestra(self):
        for matrix in self.matrices:
            plt.imshow(matrix, cmap='gray')
            plt.show()

    def suma(self):
        suma = [np.sum(matrix) for matrix in self.matrices]
        return suma

"""punto 2"""

class Identidad:
    def inicial(self, nombre, edad):
        self.Nombre = nombre
        self.Edad = edad
    
    def saludar(self):
        print(f"Hola, soy {self.Nombre} y tengo {self.Edad} aÃ±os.")
    
    def Nomb(self):
        return self.Nombre
    
    def Ed(self):
        return self.Edad
    
    def Nombre(self, nombre):
        self.Nombre = nombre
    
    def Edad(self, edad):
        self.Edad = edad